---
name: Build-AMI-with-Packer
on:
  push:
    branches:
      - main
jobs:
  create-zip:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Create Zip Archive
        run: |
          zip -r bhaktidesai_002701264_05.zip ./
        working-directory: ${{ github.workspace }}
      - name: Build AMI with Packer
        run: |
          packer init ./packer/aws-debian.pkr.hcl
          packer fmt -check ./packer/aws-debian.pkr.hcl
          packer validate ./packer/aws-debian.pkr.hcl
          packer build ./packer/aws-debian.pkr.hcl
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli
      - name: Configuring AWS Credentials for dev environment
        if: ${{ vars.ENVIRONMENT == 'dev' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Configuring AWS Credentials for demo environment
        if: ${{ vars.ENVIRONMENT == 'demo' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEMO_ACCESS }}
          aws-secret-access-key: ${{ secrets.DEMO_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Update Launch Template
        if: always()
        run: >
          asg_name="webapp_autoscaling_group"


          # Check if the autoscaling group exists

          asg_exists=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names $asg_name --query "length(AutoScalingGroups)")


          if [ "$asg_exists" -eq 0 ]; then
            echo "Autoscaling group $asg_name not found. Exiting."
            exit 1
          else

            # Get the latest AMI ID
            latest_ami=$(aws ec2 describe-images \
            --executable-users self \
            --filters "Name=state,Values=available" "Name=architecture,Values=x86_64" "Name=root-device-type,Values=ebs" \
            --query "reverse(sort_by(Images, &CreationDate))[0].ImageId" \
            )
            echo "The latest AMI is: $latest_ami"

            # Update the launch template with the latest AMI
            aws ec2 create-launch-template-version \
            --launch-template-name myLaunchTemplate \
            --source-version 1 \
            --launch-template-data '{"ImageId":'$latest_ami'}'

            # Refresh instances in the autoscaling group
            aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $asg_name \
            --preferences '{"InstanceWarmup": 300, "MinHealthyPercentage": 0, "StandbyInstances": "Terminate"}' \
            --query 'InstanceRefreshId'

            echo "Instance Refresh ID: $refresh_output"
            echo "Waiting for instance refresh to complete..."

            while true; do
              refresh_status=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name $asg_name \
              --query 'InstanceRefreshes[0].Status')

              echo "Instance Refresh Status: $refresh_status"

              if [ "$refresh_status" = '"Successful"' ]; then
                echo "Instance refresh successful."
                break
              elif [ "$refresh_status" = '"Failed"' ]; then
                echo "Instance refresh successful."
                break
              elif [ "$refresh_status" = '"Cancelled"' ]; then
                echo "Instance refresh successful."
                break                            
              else
                echo "Instance refresh not yet successful waiting....."
                sleep 1
              fi
            done
          fi
