name: Packer-PR-Checks
on:
  pull_request:
    branches:
      - main
    types:
      - opened
  pull_request_target:
    branches:
      - main
    types:
      - opened
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create .env File
        run: |
          echo "PORT=3000" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=cloud_assignment" >> .env
          echo "DB_USER=admin" >> .env
          echo "DB_PASSWORD=admin@123" >> .env
        working-directory: ${{ github.workspace }}
      - name: Set up Node.js and npm
        run: |
          sudo apt update
          sudo apt install -y nodejs npm
        continue-on-error: true # Continue even if this step fails
      - name: Set up MariaDB
        run: |
          sudo apt update
          sudo apt install -y mariadb-server
          sudo systemctl start mariadb
          sudo systemctl enable mariadb
          sudo mysqladmin -u root password "root"
          sudo mysql -u root -p"root" -e "CREATE DATABASE cloud_assignment;"
          sudo mysql -u root -p"root" -e "CREATE USER 'admin'@'localhost' IDENTIFIED BY 'admin@123';"
          sudo mysql -u root -p"root" -e "GRANT ALL PRIVILEGES ON *.* TO 'admin'@'localhost' WITH GRANT OPTION;"
          sudo mysql -u root -p"root" -e "FLUSH PRIVILEGES;"
      - name: Display setup information
        run: |
          echo "Root password for MariaDB has been set to: root"
          echo "Database cloud_assignment has been created."
          echo "User admin with admin privileges has been created."
          echo "Node.js, npm, and MariaDB have been installed."
      - name: Install dependencies
        run: npm install
      - name: Run index.js
        run: node index.js &
      - name: Wait for 10 seconds
        run: sleep 10
      - name: Check URL "http://localhost:3000/healthz"
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/healthz)
          if [[ "$RESPONSE" -eq 200 ]]; then
            echo "URL is accessible."
          else
            echo "URL returned a non-200 status code: $RESPONSE"
            exit 1
          fi
  packer_checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create Zip Archive
        run: |
          zip -r bhaktidesai_002701264_05.zip .
      - name: Run Packer init
        run: packer init ./packer/aws-debian.pkr.hcl
      - name: Run packer fmt
        run: packer fmt ./packer/aws-debian.pkr.hcl
      - name: Check for changes
        id: git-diff
        run: |
          git diff --exit-code || {
            echo "Packer template has been modified during 'packer fmt'. Please make sure your Packer template is properly formatted.";
            exit 1;
          }
      - name: Run packer validate
        run: packer validate ./packer/aws-debian.pkr.hcl
      - name: Check validation status
        id: validate-status
        run: |
          if [[ $(packer validate ./packer/aws-debian.pkr.hcl) == *"The configuration is valid."* ]]; then
            echo "Packer template validation succeeded."
          else
            echo "Packer template validation failed. Please fix any issues before merging."
            exit 1
          fi
      - name: Final checks
        if: ${{ steps.validate-status.outcome == 'success' }}
        run: echo "All checks passed."
